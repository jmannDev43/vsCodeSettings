{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    "scope": "javascript,typescript",
    "prefix": "cs",
    "body": ["console.log('$1', $1);$2"],
    "description": "Log output to console"
  },
  "act": {
    "prefix": "act",
    "body": [
      "export const ${actionName} = ({ ${param1} }) => ({",
      "  type: ${type},",
      "  payload: ${payload},",
      "  meta: { feature: ${feature} },",
      "});"
    ],
    "description": ""
  },
  "actf": {
    "prefix": "actf",
    "body": [
      "export const ${actionName} = ({ $param1$, feature }) => ({",
      "type: {`}{feature} ${${typeDesc}}`,",
      "payload: ${payload},",
      "meta: { feature },",
      "});"
    ],
    "description": "redux action, with feature"
  },
  "ca": {
    "prefix": "ca",
    "body": ["console.log('############### ${msg} ###############');${END}"],
    "description": "line version of console log"
  },
  "cc": {
    "prefix": "cc",
    "body": ["console.log({`}{msg}`);${END}"],
    "description": "console log, just msg"
  },
  "cn": {
    "prefix": "cn",
    "body": ["export default connect(${props}, ${methods})(${C});", "${end}"],
    "description": "connect"
  },
  "cne": {
    "prefix": "cne",
    "body": [
      "export default connect(",
      "  ${props},",
      "  ${methods}",
      ")(${C});",
      "${end}"
    ],
    "description": "connect expanded"
  },
  "cp": {
    "prefix": "cp",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "class ${class} extends Component {",
      "  render() {",
      "    return (",
      "      ${END}",
      "    );",
      "  }",
      "}",
      "",
      "export default ${class};",
      ""
    ],
    "description": "component"
  },
  "cs": {
    "prefix": "cs",
    "body": ["console.log('${msg}', ${msg});${END}"],
    "description": "console.log"
  },
  "dc": {
    "prefix": "dc",
    "body": [
      "describe('${desc}', () => {",
      "it('${it}', () => {",
      "",
      "});",
      "});"
    ],
    "description": "describe block"
  },
  "ec": {
    "prefix": "ec",
    "body": ["export const ${end}"],
    "description": "export const"
  },
  "ecf": {
    "prefix": "ecf",
    "body": ["export const ${prefix} = {`}{${prefix}} $prefix1$`;"],
    "description": "export const var"
  },
  "ecv": {
    "prefix": "ecv",
    "body": ["export const ${prefix} = '${prefix}';"],
    "description": "type string"
  },
  "ed": {
    "prefix": "ed",
    "body": ["export default ${class};", "${END}"],
    "description": ""
  },
  "md": {
    "prefix": "md",
    "body": ["import ${class} from '@material-ui/core/${class}';${END}"],
    "description": "material-ui"
  },
  "mdb": {
    "prefix": "mdb",
    "body": ["import { ${class} } from 'material-ui/${class}';${END}"],
    "description": "material-ui"
  },
  "mdl": {
    "prefix": "mdl",
    "body": [
      "export const ${prefix}Middleware = ({ dispatch }) => next => action => {",
      "next(action);",
      "if (action.type.includes(${test})) {",
      "${logic}",
      "}",
      "};"
    ],
    "description": "redux middleware"
  },
  "mdls": {
    "prefix": "mdls",
    "body": [
      "export const ${prefix}Middleware = ({ dispatch }) => next => action => {",
      "next(action);",
      "switch (action.type) {",
      "case $case1$:",
      "${end}",
      "break;",
      "default:",
      "break;",
      "}",
      "};"
    ],
    "description": "redux middleware (switch)"
  },
  "rd": {
    "prefix": "rd",
    "body": [
      ".reduce((acc, curr) => {",
      "${END}",
      "return acc;",
      "}, ${acc});"
    ],
    "description": "reduce"
  },
  "red": {
    "prefix": "red",
    "body": [
      "const initState = ${initState};",
      "",
      "export const ${prefix}Reducer = (${prefix} = initState, action) => {",
      "switch (action.type) {",
      "  case $case1$:",
      "    return action.payload;",
      "${end}",
      "  default:",
      "   return ${prefix};",
      "}",
      "};",
      ""
    ],
    "description": "redux reducer"
  },
  "redf": {
    "prefix": "redf",
    "body": [
      "const initState = ${initState};",
      "",
      "export const ${prefix}Reducer = (${prefix} = initState, action) => {",
      "switch (true) {",
      "",
      "case action.type.includes($case1$):",
      "return $return1$;",
      "",
      "default:",
      "return ${prefix};",
      "}",
      "};",
      ""
    ],
    "description": "redux reducer with includes"
  },
  "rer": {
    "prefix": "rer",
    "body": [
      "case {`}{$feature1$} ${API_ERROR}`:",
      "next(",
      "showSnackbar({",
      "message: action.payload,",
      "messageType: 'error',",
      "feature: $feature2$,",
      "})",
      ");",
      "break;"
    ],
    "description": "redux error"
  },
  "sc": {
    "prefix": "sc",
    "body": [" /*?*/"],
    "description": "quokka quickhand"
  },
  "sdf": {
    "prefix": "sdf",
    "body": ["const { ${props} } = this.${from};"],
    "description": "destructure"
  },
  "st": {
    "prefix": "st",
    "body": ["const styles = theme => ({", "${place}", "});"],
    "description": "styles block"
  },
  "ws": {
    "prefix": "ws",
    "body": ["import { withStyles } from '@material-ui/core/styles';"],
    "description": "withStyles import"
  },
  "test": {
    "prefix": "test",
    "body": ["test('${NAME}', async () => {", "${END}", "});"],
    "description": "Inserts test() block"
  },
  "pt": {
    "prefix": "pt",
    "body": ["import PropTypes from 'prop-types';"],
    "description": "import prop types"
  },
  "pta": {
    "prefix": "pta",
    "body": ["PropTypes.array,"],
    "description": "Array prop type"
  },
  "ptar": {
    "prefix": "ptar",
    "body": ["PropTypes.array.isRequired,"],
    "description": "Array prop type required"
  },
  "ptb": {
    "prefix": "ptb",
    "body": ["PropTypes.bool,"],
    "description": "Bool prop type"
  },
  "ptbr": {
    "prefix": "ptbr",
    "body": ["PropTypes.bool.isRequired,"],
    "description": "Bool prop type required"
  },
  "ptel": {
    "prefix": "ptel",
    "body": ["PropTypes.element,"],
    "description": "React element prop type"
  },
  "ptelr": {
    "prefix": "ptelr",
    "body": ["PropTypes.element.isRequired,"],
    "description": "React element prop type required"
  },
  "ptf": {
    "prefix": "ptf",
    "body": ["PropTypes.func,"],
    "description": "Func prop type"
  },
  "ptfr": {
    "prefix": "ptfr",
    "body": ["PropTypes.func.isRequired,"],
    "description": "Func prop type required"
  },
  "ptn": {
    "prefix": "ptn",
    "body": ["PropTypes.number,"],
    "description": "Number prop type"
  },
  "ptnr": {
    "prefix": "ptnr",
    "body": ["PropTypes.number.isRequired,"],
    "description": "Number prop type required"
  },
  "pto": {
    "prefix": "pto",
    "body": ["PropTypes.object,"],
    "description": "Object prop type"
  },
  "ptor": {
    "prefix": "ptor",
    "body": ["PropTypes.object.isRequired,"],
    "description": "Object prop type required"
  },
  "pts": {
    "prefix": "pts",
    "body": ["PropTypes.string,"],
    "description": "String prop type"
  },
  "ptsr": {
    "prefix": "ptsr",
    "body": ["PropTypes.string.isRequired,"],
    "description": "String prop type required"
  },
  "rdp": {
    "prefix": "rdp",
    "body": ["$1$.defaultProps = {", "${end}", "};"],
    "description": "Creates empty defaultProps declaration"
  },
  "rpt": {
    "prefix": "rpt",
    "body": ["$1.propTypes = {", "${end}", "};"],
    "description": "Creates empty propTypes declaration"
  },
  "fp": {
    "prefix": "fp",
    "body": [
      "import React from 'react';",
      "",
      "const ${comp} = props => (",
      "  ${markup}",
      ");",
      "",
      "export default ${comp};",
      ""
    ],
    "description": "functional component"
  },
  "fpp": {
    "prefix": "fpp",
    "body": ["const ${comp} = props => (", "${markup}", ");", ""],
    "description": "fp lite"
  }
}

